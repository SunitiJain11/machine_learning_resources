                                                what is CORRWITH
https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.corrwith.html

                                                    merge
https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.merge.html
https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html

                                                    group_by
https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html

                                                  pivot_table
https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.pivot_table.html

                                                     dropna
https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.dropna.html

DATA PRE- PROCESSING

                                          HOW TO GET COLUMN NAMES IN PANDAS
https://stackoverflow.com/questions/19482970/get-list-from-pandas-dataframe-column-headers
just list(dataframe_name)[0]
list(dataframe.columns)
df.colums[[1,2,3,5,10]]

                                          DIFFERENT WAYS TO CREARTE DATA FRAME
https://www.geeksforgeeks.org/different-ways-to-create-pandas-dataframe/
https://stackoverflow.com/questions/34682828/extracting-specific-selected-columns-to-new-dataframe-as-a-copy

                                            inplace argument
no new copy of dataframe is made, chnages are maede within the data frame.                                            

                                               reset_index()
resets te index . if index is mismanged ot missing, apply this. don'e forget to do
dataframe = dataframe.reser_index().not ofr this but for every function.

                                                set_index()
to make a particular column index

                                                 append()
to append one data frame into another
df1= df1.append(df2)

                                                   drop()
to drop a row, df1= df1.drop([0])
to drop a column df1= df1.drop('sales',1) # 1 is for axis= 1 
or df1= df1([[12,3,4]], 1)  #column numbers

                                                  apply()
to apply a change row wise
df1= df1.appyl( <functino_name>, axis=1)  #do for each row- axis=1. 
